import React, { useState, useEffect } from 'react';
import { updateRecord } from '../utils/recordUpdates.js';
import { createRecord } from '../utils/recordCreation.js';
import { useToast } from '../contexts/ToastContext.js';
import { navigateToURL } from '../utils/navigation.js';

const SurveyTab = ({ project, fetchModalData }) => {
    const { showToast } = useToast();
    const [isEditing, setIsEditing] = useState(false);
    const [isSaving, setIsSaving] = useState(false);
    
    const defaultFormData = {
        reportPdfId: '',
        reportUrl: '',
        summarySent: null,
        assessmentDate: '',
        roofType: '',
        roofCondition: '',
        treeTrimmingRequired: 'No',
        mainServicePanelSize: '',
        treeWorkRequired: 'No',
        roofWorkRequired: 'No',
        panelUpgradeRequired: 'No',
        summaryNotes: '',
        sendFinalSummary: false
    };

    const [formData, setFormData] = useState(defaultFormData);
    const survey = project.surveys?.[0]; // Get the most recent survey

    // Add this helper function
    const formatDateForInput = (dateString) => {
        if (!dateString) return '';
        try {
            // Parse MM/DD/YY format
            const [month, day, year] = dateString.split('/');
            // Convert to YYYY-MM-DD
            return `20${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`;
        } catch (error) {
            console.error('Error formatting date for input:', error);
            return '';
        }
    };

    useEffect(() => {
        if (survey) {
            setFormData({
                reportPdfId: survey.reportPdfId,
                reportUrl: survey.reportUrl,
                summarySent: survey.summarySent,
                assessmentDate: formatDateForInput(survey.assessmentDate),
                roofType: survey.roofType,
                roofCondition: survey.roofCondition,
                treeTrimmingRequired: survey.treeTrimmingRequired,
                mainServicePanelSize: survey.mainServicePanelSize,
                treeWorkRequired: survey.treeWorkRequired,
                roofWorkRequired: survey.roofWorkRequired,
                panelUpgradeRequired: survey.panelUpgradeRequired,
                summaryNotes: survey.summaryNotes,
                sendFinalSummary: survey.sendFinalSummary === true || survey.sendFinalSummary === "true"
            });
        }
    }, [survey]);

    const handleInputChange = (field, value) => {
        setFormData(prev => ({
            ...prev,
            [field]: value
        }));
    };

    // Update the handleSave function to format date back to MM/DD/YY
    const formatDateForZoho = (dateString) => {
        if (!dateString) return '';
        try {
            // Parse YYYY-MM-DD format
            const [year, month, day] = dateString.split('-');
            // Convert to MM/DD/YY
            return `${month}/${day}/${year.slice(2)}`;
        } catch (error) {
            console.error('Error formatting date for Zoho:', error);
            return '';
        }
    };

    const handleSave = async () => {
        setIsSaving(true);
        try {
            if (survey) {
                await updateRecord(
                    "PM_Kanban_Surveys",
                    survey.ID,
                    {
                        data: {
                            Report_PDF_ID: formData.reportPdfId,
                            Summary_Sent: formData.summarySent,
                            Assessment_Date: formatDateForZoho(formData.assessmentDate),
                            Roof_Type: formData.roofType,
                            Roof_Condition: formData.roofCondition,
                            Tree_Trimming_Required: formData.treeTrimmingRequired,
                            Main_Service_Panel_Size: formData.mainServicePanelSize,
                            Tree_Work_Required: formData.treeWorkRequired,
                            Roof_Work_Required: formData.roofWorkRequired,
                            Panel_Upgrade_Required: formData.panelUpgradeRequired,
                            Summary_Notes: formData.summaryNotes,
                            Send_Final_Summary: formData.sendFinalSummary
                        }
                    },
                    showToast,
                    {
                        loadingMessage: "Updating survey information...",
                        successMessage: "Survey information updated successfully",
                        errorMessage: "Failed to update survey:"
                    }
                );
            } else {
                await createRecord(
                    "Add_Survey_Result",
                    {
                        Projectt: project.id,
                        Report_PDF_ID: formData.reportPdfId,
                        Summary_Sent: formData.summarySent,
                        Assessment_Date: formatDateForZoho(formData.assessmentDate),
                        Roof_Type: formData.roofType,
                        Roof_Condition: formData.roofCondition,
                        Tree_Trimming_Required: formData.treeTrimmingRequired,
                        Main_Service_Panel_Size: formData.mainServicePanelSize,
                        Tree_Work_Required: formData.treeWorkRequired,
                        Roof_Work_Required: formData.roofWorkRequired,
                        Panel_Upgrade_Required: formData.panelUpgradeRequired,
                        Summary_Notes: formData.summaryNotes,
                        Send_Final_Summary: formData.sendFinalSummary
                    },
                    showToast,
                    {
                        loadingMessage: "Creating survey record...",
                        successMessage: "Survey record created successfully",
                        errorMessage: "Failed to create survey:"
                    }
                );
            }
            await fetchModalData(project.id);
            setIsEditing(false);
        } catch (error) {
            console.error("Error saving survey data:", error);
        } finally {
            setIsSaving(false);
        }
    };

    const getStatusBadgeColor = (status) => {
        if (status === 'Yes') return 'bg-red-100 text-red-800';
        if (status === 'No') return 'bg-green-100 text-green-800';
        return 'bg-gray-100 text-gray-800';
    };

    const renderStatusBadge = (status) => {
        return React.createElement('span', {
            className: `inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusBadgeColor(status)}`
        }, status);
    };

    const renderYesNoField = (field, label, value) => {
        return React.createElement('div', { className: "mb-4" }, [
            React.createElement('label', 
                { className: "block text-sm font-medium text-gray-700 mb-2" }, 
                label
            ),
            isEditing ? 
                React.createElement('select',
                    {
                        value: value,
                        onChange: (e) => handleInputChange(field, e.target.value),
                        className: "w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500"
                    },
                    ['No', 'Yes'].map(option => 
                        React.createElement('option', 
                            { key: option, value: option }, 
                            option
                        )
                    )
                )
                : renderStatusBadge(value)
        ]);
    };

    const formatDate = (dateString) => {
        if (!dateString) return '';
        try {
            // Parse Zoho date format: MM/dd/yy HH:mm:ss
            const [datePart, timePart] = dateString.split(' ');
            const [month, day, year] = datePart.split('/');
            const [hours, minutes, seconds] = timePart.split(':');
            
            // Create date with full year (20xx)
            const date = new Date(2000 + parseInt(year), parseInt(month) - 1, parseInt(day), 
                                parseInt(hours), parseInt(minutes), parseInt(seconds));
            
            return new Intl.DateTimeFormat('en-US', {
                month: 'short',
                day: 'numeric',
                year: 'numeric',
                hour: 'numeric',
                minute: 'numeric',
                hour12: true
            }).format(date);
        } catch (error) {
            console.error('Error parsing date:', error);
            return 'Date not available';
        }
    };

    const renderLastUpdated = () => {
        if (!survey?.modifiedTime) return null;
        
        try {
            const formattedDate = formatDate(survey.modifiedTime);
            return React.createElement('p',
                { className: "text-sm text-gray-500" },
                `Last updated ${formattedDate}`
            );
        } catch (error) {
            return null;
        }
    };

    return React.createElement('div', { className: "p-6 bg-white rounded-lg shadow" }, [
        // Header
        React.createElement('div', 
            { className: "flex justify-between items-center mb-6 pb-2 border-b border-gray-200" },
            [
                React.createElement('div', { className: "space-y-1" }, [
                    React.createElement('h3',
                        { className: "text-lg font-medium text-gray-900" },
                        "Site Survey Information"
                    ),
                    renderLastUpdated()
                ]),
                survey && React.createElement('button',
                    {
                        onClick: isEditing ? handleSave : () => setIsEditing(true),
                        disabled: isSaving,
                        className: `inline-flex items-center px-4 py-2 ${isEditing ? 'bg-green-600' : 'bg-blue-600'} text-white rounded-md hover:${isEditing ? 'bg-green-700' : 'bg-blue-700'} focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-${isEditing ? 'green' : 'blue'}-500 disabled:opacity-50`
                    },
                    [
                        React.createElement('i', {
                            className: `fas fa-${isEditing ? 'save' : 'edit'} mr-2`
                        }),
                        isEditing ? (isSaving ? "Saving..." : "Save Changes") : "Edit"
                    ]
                )
            ]
        ),

        // Show placeholder when no survey exists
        !survey ? 
            React.createElement('div', 
                { className: "text-center py-12 bg-gray-50 rounded-xl border-2 border-dashed border-gray-200" },
                [
                    React.createElement('div', 
                        { className: "text-gray-400 text-4xl mb-3" },
                        React.createElement('i', { className: "fas fa-clipboard-list" })
                    ),
                    React.createElement('h3',
                        { className: "text-gray-500 font-medium" },
                        "No Survey Data Available"
                    ),
                    React.createElement('p',
                        { className: "text-sm text-gray-400 mt-1" },
                        "Survey data will appear here when available"
                    )
                ]
            )
            :
        // Content Grid
        React.createElement('div', { className: "grid grid-cols-1 md:grid-cols-2 gap-6" }, [
            // Survey Details Section
            React.createElement('div', { 
                className: "bg-white p-6 rounded-lg border border-gray-200 space-y-4 shadow-sm" 
            }, [
                React.createElement('h4', 
                    { className: "text-md font-medium text-gray-900 mb-4" },
                    "Survey Details"
                ),
                // Assessment Date
                React.createElement('div', { className: "mb-4" }, [
                    React.createElement('label',
                        { className: "block text-sm font-medium text-gray-700 mb-1" },
                        "Assessment Date"
                    ),
                    React.createElement('input',
                        {
                            type: "date",
                            value: formData.assessmentDate || '',
                            onChange: (e) => handleInputChange('assessmentDate', e.target.value),
                            disabled: !isEditing,
                            className: "w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500"
                        }
                    )
                ]),
                // Report Link
                formData.reportUrl && React.createElement('div', { className: "mb-4" }, [
                    React.createElement('label',
                        { className: "block text-sm font-medium text-gray-700 mb-1" },
                        "Survey Report"
                    ),
                    React.createElement('button',
                        {
                            onClick: () => navigateToURL(formData.reportUrl),
                            className: "inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                        },
                        [
                            React.createElement('i', { 
                                className: "fas fa-file-pdf mr-2"
                            }),
                            "View Report PDF"
                        ]
                    )
                ])
            ]),

            // Survey Findings Section
            React.createElement('div', { 
                className: "bg-white p-6 rounded-lg border border-gray-200 space-y-4 shadow-sm" 
            }, [
                React.createElement('h4',
                    { className: "text-md font-medium text-gray-900 mb-4" },
                    "Survey Findings"
                ),
                // Roof Information
                React.createElement('div', { className: "mb-4" }, [
                    React.createElement('h4',
                        { className: "text-md font-medium text-gray-900 mb-4" },
                        "Roof Assessment"
                    ),
                    React.createElement('div', { className: "grid grid-cols-1 md:grid-cols-2 gap-4" }, [
                        // Roof Type
                        React.createElement('div', { className: "mb-4" }, [
                            React.createElement('label',
                                { className: "block text-sm font-medium text-gray-700 mb-1" },
                                "Type of Roof"
                            ),
                            React.createElement('input',
                                {
                                    type: "text",
                                    value: formData.roofType,
                                    onChange: (e) => handleInputChange('roofType', e.target.value),
                                    placeholder: "e.g., Composite Shingle, Tile, etc.",
                                    disabled: !isEditing,
                                    className: "w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500"
                                }
                            )
                        ]),
                        // Roof Condition
                        React.createElement('div', { className: "mb-4" }, [
                            React.createElement('label',
                                { className: "block text-sm font-medium text-gray-700 mb-1" },
                                "Current Condition"
                            ),
                            React.createElement('input',
                                {
                                    type: "text",
                                    value: formData.roofCondition,
                                    onChange: (e) => handleInputChange('roofCondition', e.target.value),
                                    placeholder: "e.g., Excellent, Good, Fair, Poor",
                                    disabled: !isEditing,
                                    className: "w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500"
                                }
                            )
                        ])
                    ])
                ]),
                // Panel Size
                React.createElement('div', { className: "mb-4" }, [
                    React.createElement('label',
                        { className: "block text-sm font-medium text-gray-700 mb-1" },
                        "Main Service Panel Size"
                    ),
                    React.createElement('input',
                        {
                            type: "text",
                            value: formData.mainServicePanelSize,
                            onChange: (e) => handleInputChange('mainServicePanelSize', e.target.value),
                            disabled: !isEditing,
                            className: "w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500"
                        }
                    )
                ]),
                // Tree Trimming Required
                renderYesNoField('treeTrimmingRequired', 'Tree Trimming Required', formData.treeTrimmingRequired)
            ]),

            // Required Work Section (now only includes final determinations)
            React.createElement('div', { 
                className: "bg-white p-6 rounded-lg border border-gray-200 space-y-4 shadow-sm md:col-span-2" 
            }, [
                React.createElement('h4',
                    { className: "text-md font-medium text-gray-900 mb-4" },
                    "Summary Fields (Homeowner will receive a report based on these fields)"
                ),
                React.createElement('div', 
                    { className: "grid grid-cols-1 md:grid-cols-3 gap-4 mb-4" },
                    [
                        renderYesNoField('treeWorkRequired', 'Tree Work Required', formData.treeWorkRequired),
                        renderYesNoField('roofWorkRequired', 'Roof Work Required', formData.roofWorkRequired),
                        renderYesNoField('panelUpgradeRequired', 'Panel Upgrade Required', formData.panelUpgradeRequired)
                    ]
                ),
                // Summary Notes
                React.createElement('div', { className: "mb-4" }, [
                    React.createElement('label',
                        { className: "block text-sm font-medium text-gray-700 mb-1" },
                        "Summary Notes"
                    ),
                    React.createElement('textarea',
                        {
                            value: formData.summaryNotes,
                            onChange: (e) => handleInputChange('summaryNotes', e.target.value),
                            disabled: !isEditing,
                            rows: 4,
                            className: "w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500"
                        }
                    )
                ]),
                // Update the Send Final Summary section with a more informative UI
                React.createElement('div', { 
                    className: "mt-6 p-4 bg-yellow-50 border border-yellow-200 rounded-md" 
                }, [
                    // Show different UI based on whether summary has been sent
                    formData.sendFinalSummary ?
                    // Status indicator when summary has been sent
                    React.createElement('div', { 
                        className: "flex items-start space-x-3" 
                    }, [
                        React.createElement('div', {
                            className: "flex-shrink-0 mt-1"
                        }, [
                            React.createElement('span', {
                                className: "h-5 w-5 flex items-center justify-center rounded-full bg-green-100"
                            }, [
                                React.createElement('i', {
                                    className: "fas fa-check text-green-600 text-sm"
                                })
                            ])
                        ]),
                        React.createElement('div', { className: "flex-1" }, [
                            React.createElement('p',
                                { className: "text-sm font-medium text-gray-900" },
                                "Final Summary Sent to Homeowner"
                            ),
                            React.createElement('p',
                                { className: "mt-1 text-sm text-gray-500" },
                                "The homeowner has been notified of the survey results including required work and summary notes."
                            )
                        ])
                    ])
                    :
                    // Checkbox UI when summary hasn't been sent yet
                    React.createElement('div', { 
                        className: "flex items-start space-x-3" 
                    }, [
                        React.createElement('input',
                            {
                                type: "checkbox",
                                checked: formData.sendFinalSummary,
                                onChange: (e) => handleInputChange('sendFinalSummary', e.target.checked),
                                disabled: !isEditing,
                                className: "mt-1 h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                            }
                        ),
                        React.createElement('div', { className: "flex-1" }, [
                            React.createElement('label',
                                { 
                                    className: "block text-sm font-medium text-gray-900",
                                    htmlFor: "sendFinalSummary"
                                },
                                "Send Final Summary to Homeowner"
                            ),
                            React.createElement('p',
                                { className: "mt-1 text-sm text-gray-500" },
                                "When you save with this box checked, the homeowner will automatically receive an email containing:"
                            ),
                            React.createElement('ul',
                                { className: "mt-2 text-sm text-gray-600 space-y-1 list-disc list-inside" },
                                [
                                    "Required work assessment (Tree, Roof, and Panel)",
                                    "Summary notes",
                                ].map(item => 
                                    React.createElement('li', { key: item }, item)
                                )
                            )
                        ])
                    ])
                ])
            ])
        ])
    ]);
};

export default SurveyTab;
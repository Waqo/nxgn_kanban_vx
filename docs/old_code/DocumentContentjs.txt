/* global React */
import React from 'react';
import { updateRecord } from '../utils/recordUpdates.js';
import { navigateToURL } from '../utils/navigation.js';
import { uploadWorkDriveFile } from '../utils/customAPI.js';
import { useToast } from '../contexts/ToastContext.js';

const formatDate = (dateString) => {
    if (!dateString) return '';
    return new Date(dateString).toLocaleString('en-US', { 
        month: '2-digit', 
        day: '2-digit', 
        year: '2-digit',
        hour: 'numeric',
        minute: 'numeric',
        hour12: true
    });
};

const truncateFileName = (fileName, limit = 50) => {
    if (!fileName) return '';
    if (fileName.length <= limit) return fileName;
    return fileName.slice(0, limit) + '...';
};

const DOCUMENT_TYPES = [
    "Plan Set with Stamp",
    "Shade Report",
    "Yield Report",
    "Yield Report with Tree Trimming",
    "Yield Report without Tree Trimming",
    "Electrical Permit",
    "Building Permit",
    "Site Survey Report",
    "ATI",
    "Tree Trimming Invoice",
    "MPU Invoice",
    "Roofing Invoice",
    "Utility Bill",
    "Proposal",
    "Relationship Letter",
    "Owner/Property ID",
    "Signed Contract",
    "Feeder Image",
    "Property Ownership",
    "Permission To Operate",
    "PEPCO ATO",
    "Redball ATO",
    "PEPCO As Built",
    "Redball As Built",
    "TES Inspection Report"
];

const DocumentContent = ({ 
    doc, 
    isLatestVersion = false, 
    onRefresh,
    handleFileClick,
    projectId,
    workDriveFolderId,
    currentUser,
    users,
    docTypes,
    previewDoc,
    setPreviewDoc
}) => {
    const { showToast } = useToast();
    const [editingDocId, setEditingDocId] = React.useState(null);
    const [editFormData, setEditFormData] = React.useState({
        name: '',
        type: '',
        isRevision: false
    });
    const [errorMessage, setErrorMessage] = React.useState('');
    const [isUploading, setIsUploading] = React.useState(false);
    const [isSendingToInvestor, setIsSendingToInvestor] = React.useState(false);
    const [showActionsMenu, setShowActionsMenu] = React.useState(false);
    const actionMenuRef = React.useRef(null);

    // Add click outside handler for dropdown
    React.useEffect(() => {
        const handleClickOutside = (event) => {
            if (actionMenuRef.current && !actionMenuRef.current.contains(event.target)) {
                setShowActionsMenu(false);
            }
        };

        document.addEventListener('mousedown', handleClickOutside);
        return () => document.removeEventListener('mousedown', handleClickOutside);
    }, []);

    const isTruthy = (value) => {
        // Handle all possible truthy cases
        return value === true || value === "true" || value === 1 || value === "1";
    };

    const handleEditClick = (doc) => {
        setEditingDocId(doc.ID);
        setEditFormData({
            name: doc.docName || doc.Document_Name || '',
            type: doc.Doc_Type?.ID || '',
            isRevision: doc.Is_Revision === "true"
        });
    };

    const handleCancelEdit = () => {
        setEditingDocId(null);
        setEditFormData({ name: '', type: '', isRevision: false });
    };

    const handleSaveEdit = async (docId) => {
        try {
            if (!editFormData.name.trim()) {
                throw new Error('Document name cannot be empty');
            }

            const updateData = {
                Document_Name: editFormData.name.trim(),
                Doc_Type: editFormData.type,
                Is_Revision: editFormData.isRevision ? "true" : "false"
            };

            if (!editFormData.isRevision) {
                updateData.Revision_Number = null;
            }

            const response = await updateRecord(
                "PM_Kanban_Documents",
                docId,
                {
                    data: updateData
                }
            );

            if (response.code === 3000) {
                setEditingDocId(null);
                setEditFormData({ name: '', type: '', isRevision: false });
                if (onRefresh) await onRefresh();
            } else {
                throw new Error('Failed to update document');
            }
        } catch (error) {
            console.error('Error updating document:', error);
            setErrorMessage(error.message || 'Failed to update document');
        }
    };

    const handleUploadToWorkDrive = async () => {
        if (!projectId || !currentUser?.email || !doc.ID || !workDriveFolderId) {
            showToast('Missing required information for upload', 'error');
            return;
        }

        setIsUploading(true);
        showToast('Uploading to WorkDrive...', 'loading');

        try {
            await updateRecord(
                "PM_Kanban_Documents",
                doc.ID,
                {
                    data: {
                        TRIG_Upload_to_WorkDrive: "true"
                    }
                }
            );
            await onRefresh();
            showToast('File upload to WorkDrive initiated', 'success');
        } catch (error) {
            console.error('Error initiating WorkDrive upload:', error);
            showToast(error.message || 'Failed to initiate WorkDrive upload', 'error');
        } finally {
            setIsUploading(false);
        }
    };

    const handleSendToInvestor = async () => {
        if (!doc.WorkDrive_Link) {
            showToast('No WorkDrive link available', 'error');
            return;
        }
        
        try {
            setIsSendingToInvestor(true);
            showToast('Sending to investor portal...', 'loading');
            
            await updateRecord(
                "PM_Kanban_Documents",
                doc.ID,
                {
                    data: {
                        Trigger_Send_to_Inv: "true"
                    }
                }
            );
            
            showToast('Document sent to investor portal', 'success');
            if (onRefresh) await onRefresh();
        } catch (error) {
            console.error('Error sending to investor portal:', error);
            showToast('Failed to send to investor portal', 'error');
        } finally {
            setIsSendingToInvestor(false);
        }
    };

    const isEditing = editingDocId === doc.ID;

  

    const uploadUser = {
        name: doc.User?.Name || doc.Added_User || 'Unknown User'
    };


    
    const hasWorkDriveLink = (doc) => {
        if (!doc.WorkDrive_Link) return false;
        
        // Handle string format
        if (typeof doc.WorkDrive_Link === 'string') {
            return doc.WorkDrive_Link.trim() !== '';
        }
        
        // Handle object format
        if (typeof doc.WorkDrive_Link === 'object') {
            return doc.WorkDrive_Link.url && doc.WorkDrive_Link.url.trim() !== '';
        }
        
        return false;
    };

    const handleViewInWorkDrive = async (event) => {
        if (event) {
            event.preventDefault();
            event.stopPropagation();
        }

        // If no WorkDrive or Embed link, trigger upload first
        if (!doc.WorkDrive_Link && !doc.Embed_Link && workDriveFolderId) {
            try {
                // Trigger upload
                await updateRecord(
                    "PM_Kanban_Documents",
                    doc.ID,
                    {
                        data: {
                            TRIG_Upload_to_WorkDrive: "true"
                        }
                    }
                );

                // Poll for WorkDrive link
                let attempts = 0;
                const maxAttempts = 6;
                let updatedDoc = null;

                while (attempts < maxAttempts) {
                    await new Promise(resolve => setTimeout(resolve, 5000));
                    
                    // Fetch fresh project data
                    if (onRefresh) {
                        await onRefresh();
                    }
                    
                    // Check if link is now available
                    if (doc.WorkDrive_Link || doc.Embed_Link) {
                        break;
                    }
                    
                    attempts++;
                }
            } catch (error) {
                console.error('Error uploading to WorkDrive:', error);
                showToast('Failed to upload file to WorkDrive', 'error');
                return;
            }
        }

        // Try to get the embed URL first
        const embedUrl = doc.Embed_Link?.trim();
        
        // Fallback to WorkDrive URL
        let workDriveUrl = null;
        if (hasWorkDriveLink(doc)) {
            workDriveUrl = typeof doc.WorkDrive_Link === 'string' 
                ? doc.WorkDrive_Link 
                : doc.WorkDrive_Link?.url;
        }
        
        // Use the first available URL
        const previewUrl = embedUrl || workDriveUrl;
        
        if (previewUrl && setPreviewDoc) {
            setPreviewDoc({
                url: previewUrl,
                name: doc.docName || doc.Document_Name
            });
        }
    };

    return React.createElement('div',
        { className: "flex items-start gap-4 p-4" },
        [
            // Icon column
            React.createElement('div',
                { className: "flex-shrink-0 w-6 text-center" },
                React.createElement('i',
                    { 
                        className: `fas fa-file text-gray-400`
                    }
                )
            ),
            // Content column
            React.createElement('div',
                { className: "flex-grow min-w-0" },
                [
                    // Document name and badges row
                    React.createElement('div',
                        { className: "flex items-center justify-between mb-2" },
                        [
                            // Left side: Name and badges
                            React.createElement('div',
                                { className: "flex items-center gap-2 flex-grow" },
                                [
                                    isEditing ? (
                                        // Edit form
                                        React.createElement('div',
                                            { className: "flex-grow space-y-2 mr-4" },
                                            [
                                                // Name input
                                                React.createElement('input',
                                                    {
                                                        type: 'text',
                                                        value: editFormData.name,
                                                        onChange: (e) => setEditFormData(prev => ({ ...prev, name: e.target.value })),
                                                        className: "block w-full px-3 py-1 text-sm border border-gray-300 rounded-md"
                                                    }
                                                ),
                                                // Document type dropdown
                                                React.createElement('select',
                                                    {
                                                        value: editFormData.type,
                                                        onChange: (e) => setEditFormData(prev => ({ ...prev, type: e.target.value })),
                                                        className: "block w-full px-3 py-1 text-sm border border-gray-300 rounded-md"
                                                    },
                                                    [
                                                        React.createElement('option', { value: '' }, 'Select Type'),
                                                        ...docTypes.map(type =>
                                                            React.createElement('option', 
                                                                { 
                                                                    value: type.ID, 
                                                                    key: type.ID 
                                                                }, 
                                                                type.Name
                                                            )
                                                        )
                                                    ]
                                                ),
                                                // Revision checkbox
                                                React.createElement('label',
                                                    { className: "flex items-center gap-2 text-sm text-gray-600" },
                                                    [
                                                        React.createElement('input',
                                                            {
                                                                type: 'checkbox',
                                                                checked: editFormData.isRevision,
                                                                onChange: (e) => setEditFormData(prev => ({ 
                                                                    ...prev, 
                                                                    isRevision: e.target.checked 
                                                                })),
                                                                className: "rounded border-gray-300"
                                                            }
                                                        ),
                                                        "Is Revision"
                                                    ]
                                                ),
                                                // Save/Cancel buttons
                                                React.createElement('div',
                                                    { className: "flex gap-2 mt-2" },
                                                    [
                                                        React.createElement('button',
                                                            {
                                                                onClick: () => handleSaveEdit(doc.ID),
                                                                className: "px-3 py-1 text-xs text-white bg-blue-600 hover:bg-blue-700 rounded-md"
                                                            },
                                                            "Save"
                                                        ),
                                                        React.createElement('button',
                                                            {
                                                                onClick: handleCancelEdit,
                                                                className: "px-3 py-1 text-xs text-gray-600 bg-gray-100 hover:bg-gray-200 rounded-md"
                                                            },
                                                            "Cancel"
                                                        )
                                                    ]
                                                )
                                            ]
                                        )
                                    ) : (
                                        // Document name display
                                        React.createElement('span',
                                            { 
                                                className: "font-medium",
                                                title: doc.docName || doc.Document_Name || ''
                                            },
                                            truncateFileName(doc.docName || doc.Document_Name || '')
                                        )
                                    ),
                                    // Badges container
                                    React.createElement('div',
                                        { className: "flex flex-wrap items-center gap-2" },
                                        [
                                            // Revision status badge
                                            React.createElement('span',
                                                {
                                                    className: `px-2 py-0.5 text-xs rounded-full ${
                                                        doc.Is_Revision === "true"
                                                            ? 'bg-purple-100 text-purple-700'
                                                            : 'bg-blue-100 text-blue-700'
                                                    }`
                                                },
                                                doc.Is_Revision === "true"
                                                    ? `Revision ${doc.Revision_Number}` 
                                                    : 'Not Revision'
                                            ),
                                            // Latest badge
                                            isLatestVersion && React.createElement('span',
                                                {
                                                    className: "px-2 py-0.5 text-xs rounded-full bg-green-100 text-green-700"
                                                },
                                                "Latest"
                                            ),
                                            // Sent To Investor Portal badge
                                            isTruthy(doc.Sent_To_Investor_Portal) && React.createElement('span',
                                                {
                                                    className: "px-2 py-0.5 text-xs rounded-full bg-indigo-100 text-indigo-700 flex items-center gap-1"
                                                },
                                                [
                                                    React.createElement('i', { 
                                                        className: "fas fa-paper-plane text-xs mr-1" 
                                                    }),
                                                    "Sent To Investor"
                                                ]
                                            ),
                                            // Processing indicator
                                            isTruthy(doc.Trigger_Send_to_Inv) && React.createElement('span',
                                                {
                                                    className: "px-2 py-0.5 text-xs rounded-full bg-yellow-100 text-yellow-700 flex items-center gap-1"
                                                },
                                                [
                                                    React.createElement('i', { 
                                                        className: "fas fa-sync fa-spin text-xs mr-1" 
                                                    }),
                                                    "Processing"
                                                ]
                                            )
                                        ]
                                    )
                                ]
                            ),
                            // Right side: Action buttons with dropdown
                            React.createElement('div',
                                { 
                                    className: "flex items-center gap-2",
                                    ref: actionMenuRef
                                },
                                [
                                    // Open button
                                    React.createElement('button',
                                        {
                                            onClick: () => handleFileClick(doc.File_Upload, doc.ID),
                                            className: "p-2 text-blue-600 hover:text-blue-700 bg-blue-50 hover:bg-blue-100 rounded-md group relative",
                                            title: "Download Document"
                                        },
                                        [
                                            React.createElement('i',
                                                { className: "fas fa-download" }
                                            ),
                                            React.createElement('span',
                                                { className: "absolute right-0 bottom-full mb-2 hidden group-hover:block bg-gray-800 text-white text-xs rounded py-1 px-2" },
                                                "Download Document"
                                            )
                                        ]
                                    ),

                                    // WorkDrive actions
                                    workDriveFolderId ? 
                                        React.createElement('button',
                                            {
                                                onClick: handleViewInWorkDrive,
                                                className: "p-2 text-indigo-600 hover:text-indigo-700 bg-indigo-50 hover:bg-indigo-100 rounded-md group relative",
                                                title: "Open Document"
                                            },
                                            [
                                                React.createElement('i',
                                                    { className: "fas fa-external-link-alt" }
                                                ),
                                                React.createElement('span',
                                                    { className: "absolute right-0 bottom-full mb-2 hidden group-hover:block bg-gray-800 text-white text-xs rounded py-1 px-2" },
                                                    "Open Document"
                                                )
                                            ]
                                        )
                                        : null,
                                    // Edit button
                                    React.createElement('button',
                                        {
                                            onClick: () => handleEditClick(doc),
                                            className: "p-2 text-gray-600 hover:text-gray-700 bg-gray-50 hover:bg-gray-100 rounded-md group relative",
                                            title: "Edit Document"
                                        },
                                        [
                                            React.createElement('i',
                                                { className: "fas fa-edit" }
                                            ),
                                            React.createElement('span',
                                                { className: "absolute right-0 bottom-full mb-2 hidden group-hover:block bg-gray-800 text-white text-xs rounded py-1 px-2" },
                                                "Edit Document"
                                            )
                                        ]
                                    )
                                ]
                            )
                        ]
                    ),
                    // Added Time and User
                    !isEditing && React.createElement('div',
                        { className: "flex items-center gap-4 text-xs text-gray-500 mt-1" },
                        [
                            React.createElement('span',
                                null,
                                `Added ${formatDate(doc.Added_Time)}`
                            ),
                            uploadUser && React.createElement('span',
                                null,
                                [
                                    "• Uploaded by ",
                                    React.createElement('span',
                                        { className: "font-medium" },
                                        uploadUser.name
                                    )
                                ]
                            )
                        ]
                    )
                ]
            )
        ]
    );
};

export default DocumentContent;
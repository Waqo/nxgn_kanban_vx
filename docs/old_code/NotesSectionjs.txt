/* global React */
import React from 'react';
import NoteItem from './NoteItem.js';
import { createRecord } from '../utils/recordCreation.js';
import { getQueryParams } from '../utils/queryParams.js';
import { getCurrentUser } from '../utils/userInfo.js';
import { createNoteWithAttachments, validateAttachments } from '../utils/attachmentUpload.js';
import NoteAttachment from './NoteAttachment.js';

const NotesSection = ({ 
    project,
    noteInput,
    setNoteInput,
    notifySales,
    setNotifySales,
    selectedUsers,
    setSelectedUsers,
    users,
    handleAddNote,
    replyingTo,
    replyInput,
    setReplyInput,
    handleReply,
    showAllNotes,
    setShowAllNotes,
    showAllReplies,
    setShowAllReplies,
    currentUser
}) => {
    const [showUserDropdown, setShowUserDropdown] = React.useState(false);
    const [filteredUsers, setFilteredUsers] = React.useState([]);
    const [isAddingNote, setIsAddingNote] = React.useState(false);
    const [isAddingReply, setIsAddingReply] = React.useState(false);
    const [attachments, setAttachments] = React.useState([]);
    const fileInputRef = React.useRef(null);
    const [isDragging, setIsDragging] = React.useState(false);

    React.useEffect(() => {
        const filterUsers = () => {
            try {
                if (!users) {
                    setFilteredUsers([]);
                    return;
                }

                // Filter out current user and sales reps only for the dropdown
                const filteredList = users.filter(user => 
                    user.id !== currentUser?.id &&  // Filter current user locally
                    user?.role !== "Sales Rep"
                );
                setFilteredUsers(filteredList);
            } catch (error) {
                console.error("Error filtering users:", error);
                setFilteredUsers([]);
            }
        };
        filterUsers();
    }, [users, currentUser]);

    const handleNoteSubmit = async () => {
        if (!noteInput.trim() && attachments.length === 0) return;
        if (!currentUser) {
            console.error('No current user found');
            return;
        }
        
        setIsAddingNote(true);
        try {
            if (attachments.length > 0) {
                // Log attachment note data
                const attachmentNoteData = {
                    Note: noteInput.trim() || " ",
                    Project: project.id,
                    Team_Only: notifySales ? "true" : "false",
                    User_Lookup: currentUser.id,
                    Viewed_By: [currentUser.id],
                    Context: 'General',
                    Department: "Project Management",
                    Author: currentUser.name,
                    Tagged_Users: selectedUsers.map(user => user.id),
                    attachments: attachments,
                    currentUser  // Add currentUser to the data
                };
                console.log('Creating note with attachments:', attachmentNoteData);

                const result = await createNoteWithAttachments(attachmentNoteData);

                if (!result.success) {
                    throw new Error('Failed to create note with attachments');
                }
            } else {
                // Log regular note data
                const noteData = {
                    Note: noteInput.trim() || " ",
                    Project: project.id,
                    Team_Only: notifySales ? "true" : "false",
                    User_Lookup: currentUser.id,
                    Viewed_By: [currentUser.id],
                    Context: 'General',
                    Department: "Project Management",
                    Author: currentUser.name,
                    Tagged_Users: selectedUsers.map(user => user.id),
                    currentUser  // Add currentUser to the data
                };
                
                console.log('Creating regular note:', noteData);

                const noteResponse = await createRecord("Add_Note", noteData);

                if (!noteResponse || (!noteResponse.data && noteResponse.code !== 3000)) {
                    throw new Error(`Failed to create note: ${noteResponse?.message || 'Unknown error'}`);
                }
            }

            // Clear form
            setNoteInput('');
            setAttachments([]);
            setNotifySales(false);
            setSelectedUsers([]);
            setShowUserDropdown(false);

            // Refresh data
            if (handleAddNote) await handleAddNote(project.id);

        } catch (error) {
            console.error('Error adding note:', error);
        } finally {
            setIsAddingNote(false);
        }
    };

    const handleAddReply = async (parentNoteId) => {
        if (!replyInput.trim()) return;
        setIsAddingReply(true);
        try {
            const replyData = {
                Note: replyInput,
                Author: getQueryParams().userName,
                Project: project.id,
                Replied_To: parentNoteId.toString(),
                Notify_Sales: false,
                Tagged_Users: selectedUsers
            };

            console.log('Sending reply data:', replyData);
            const response = await createRecord('Add_Note', replyData);
            console.log('Reply creation response:', response);

            if (!response || (!response.data && response.code !== 3000)) {
                throw new Error(`Failed to create reply: ${response?.message || 'Unknown error'}`);
            }

            // Refresh data through parent
            if (handleAddNote) await handleAddNote(project.id);
            
            setReplyInput('');
            setReplyingTo(null);
        } catch (error) {
            logError(error);
        } finally {
            setIsAddingReply(false);
        }
    };

    const handleDragOver = (e) => {
        e.preventDefault();
        setIsDragging(true);
    };

    const handleDragLeave = (e) => {
        e.preventDefault();
        setIsDragging(false);
    };

    const handleDrop = (e) => {
        e.preventDefault();
        setIsDragging(false);
        
        const files = Array.from(e.dataTransfer.files);
        const { validFiles, errors, hasErrors } = validateAttachments(files);
        
        if (hasErrors) {
            console.error('Attachment validation errors:', errors);
            return;
        }

        setAttachments(prev => [...prev, ...validFiles]);
    };

    return React.createElement('div',
        { className: "mt-6 bg-white p-4 rounded-lg shadow-sm" },
        [
            // Header
            React.createElement('div',
                { className: "flex justify-between items-center mb-4 pb-2 border-b border-gray-200" },
                [
                    React.createElement('h3',
                        { className: "text-sm font-medium text-gray-500" },
                        "Notes"
                    )
                ]
            ),
            // Note Input Section
            React.createElement('div',
                { 
                    className: "bg-white rounded-lg shadow-sm",
                    onDragOver: (e) => {
                        e.preventDefault();
                        e.stopPropagation();
                        if (!isDragging) setIsDragging(true);
                    },
                    onDragEnter: (e) => {
                        e.preventDefault();
                        e.stopPropagation();
                        if (!isDragging) setIsDragging(true);
                    },
                    onDragLeave: (e) => {
                        e.preventDefault();
                        e.stopPropagation();
                        // Only set isDragging to false if we're leaving the container (not its children)
                        if (e.currentTarget.contains(e.relatedTarget)) return;
                        setIsDragging(false);
                    },
                    onDrop: handleDrop
                },
                [
                    // Note input with improved styling and larger drop zone
                    React.createElement('div',
                        {
                            className: `relative transition-all duration-200 ease-in-out ${
                                isDragging ? 'p-8' : 'p-4'
                            }`
                        },
                        [
                            React.createElement('textarea',
                                {
                                    className: "w-full p-3 border border-gray-200 rounded-lg focus:border-blue-500 focus:ring-1 focus:ring-blue-500 transition-colors resize-none min-h-[100px] placeholder-gray-400",
                                    placeholder: "Write a note... (drag & drop files here)",
                                    value: noteInput,
                                    onChange: (e) => setNoteInput(e.target.value)
                                }
                            ),
                            // Improved drag overlay with smoother transition
                            isDragging && React.createElement('div',
                                {
                                    className: "absolute inset-0 bg-blue-50 bg-opacity-90 flex items-center justify-center rounded-lg border-2 border-dashed border-blue-500 transition-all duration-200 ease-in-out"
                                },
                                React.createElement('div',
                                    { className: "text-center space-y-2" },
                                    [
                                        React.createElement('i', 
                                            { className: "fas fa-cloud-upload-alt text-3xl text-blue-500" }
                                        ),
                                        React.createElement('p',
                                            { className: "text-blue-600 font-medium" },
                                            "Drop files to attach"
                                        )
                                    ]
                                )
                            )
                        ]
                    ),
                    // Add between textarea and bottom row
                    React.createElement('div',
                        { className: "mt-2" },
                        [
                            // File input (hidden)
                            React.createElement('input', {
                                ref: fileInputRef,
                                type: 'file',
                                multiple: true,
                                accept: '*/*',
                                className: "hidden",
                                onChange: (e) => {
                                    const files = Array.from(e.target.files);
                                    const { validFiles, errors, hasErrors } = validateAttachments(files);
                                    
                                    if (hasErrors) {
                                        console.error('Attachment validation errors:', errors);
                                        return;
                                    }

                                    setAttachments(prev => [...prev, ...validFiles]);
                                }
                            }),

                            // Attachment preview area
                            attachments.length > 0 && React.createElement('div',
                                { className: "flex flex-wrap gap-2 mb-2" },
                                attachments.map((file, index) => 
                                    React.createElement('div',
                                        { 
                                            key: index,
                                            className: "relative group" 
                                        },
                                        [
                                            file.type.startsWith('image/') ?
                                                React.createElement('img', {
                                                    src: URL.createObjectURL(file),
                                                    className: "h-16 w-16 object-cover rounded border",
                                                    alt: `Attachment ${index + 1}`
                                                }) :
                                                React.createElement('div', {
                                                    className: "h-16 w-16 flex items-center justify-center rounded border bg-gray-100",
                                                }, [
                                                    React.createElement('i', { 
                                                        className: "fas fa-file text-gray-400 text-xl"
                                                    })
                                                ]),
                                            React.createElement('button', {
                                                className: "absolute -top-1 -right-1 bg-red-500 text-white rounded-full w-5 h-5 flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity",
                                                onClick: () => {
                                                    if (file.type.startsWith('image/')) {
                                                        URL.revokeObjectURL(file.preview);
                                                    }
                                                    setAttachments(prev => prev.filter((_, i) => i !== index));
                                                }
                                            }, "×")
                                        ]
                                    )
                                )
                            ),

                            // Add attachment button
                            React.createElement('button',
                                {
                                    className: "inline-flex items-center gap-2 text-sm text-gray-600 hover:text-blue-600",
                                    onClick: () => fileInputRef.current?.click()
                                },
                                [
                                    React.createElement('i', { className: "fas fa-paperclip" }),
                                    "Attach"
                                ]
                            )
                        ]
                    ),
                    // Bottom row with notify sales checkbox and user dropdown
                    React.createElement('div',
                        { className: "px-4 py-3 border-t border-gray-100 bg-gray-50 rounded-b-lg flex items-center justify-between" },
                        [
                            // Left side container for checkbox and dropdown
                            React.createElement('div',
                                { className: "flex items-center gap-4" },
                                [
                                    // Notify Sales checkbox (relabeled to Team Only)
                                    React.createElement('div',
                                        { className: "flex items-center gap-2 mt-2" },
                                        [
                                            React.createElement('input',
                                                {
                                                    type: "checkbox",
                                                    id: "teamOnly",
                                                    checked: notifySales,
                                                    onChange: (e) => setNotifySales(e.target.checked),
                                                    className: "w-4 h-4 text-blue-600 rounded"
                                                }
                                            ),
                                            React.createElement('label',
                                                {
                                                    htmlFor: "teamOnly",
                                                    className: "text-sm text-gray-600 cursor-pointer"
                                                },
                                                "Team Only"
                                            ),
                                            React.createElement('span',
                                                {
                                                    className: "text-xs text-gray-500 ml-2"
                                                },
                                                "(Only internal team members will see this note)"
                                            )
                                        ]
                                    ),
                                    // User dropdown container
                                    React.createElement('div', 
                                        { className: "relative" },
                                        [
                                            // Trigger button
                                            React.createElement('button',
                                                {
                                                    type: "button",
                                                    className: "inline-flex items-center gap-2 px-3 py-2 text-sm border rounded-md hover:bg-gray-50",
                                                    onClick: () => setShowUserDropdown(!showUserDropdown)
                                                },
                                                [
                                                    React.createElement('i', { className: "fas fa-users" }),
                                                    "Tag Users",
                                                    selectedUsers.length > 0 && React.createElement('span',
                                                        { className: "bg-blue-100 text-blue-600 px-2 rounded-full text-xs" },
                                                        selectedUsers.length
                                                    )
                                                ]
                                            ),
                                            
                                            // Dropdown menu
                                            showUserDropdown && React.createElement('div',
                                                {
                                                    className: "absolute z-10 mt-1 w-56 bg-white rounded-md shadow-lg border"
                                                },
                                                React.createElement('div',
                                                    { className: "p-2 space-y-1 max-h-48 overflow-auto" },
                                                    [
                                                        // Tag All checkbox
                                                        React.createElement('label',
                                                            {
                                                                className: "flex items-center gap-2 px-2 py-1 mb-2 border-b hover:bg-gray-50 rounded cursor-pointer"
                                                            },
                                                            [
                                                                React.createElement('input',
                                                                    {
                                                                        type: "checkbox",
                                                                        checked: selectedUsers.length === filteredUsers.length,
                                                                        onChange: () => {
                                                                            if (selectedUsers.length === filteredUsers.length) {
                                                                                // If all are selected, deselect all
                                                                                setSelectedUsers([]);
                                                                            } else {
                                                                                // If not all are selected, select all
                                                                                setSelectedUsers(filteredUsers);
                                                                            }
                                                                        },
                                                                        className: "rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                                                                    }
                                                                ),
                                                                React.createElement('span',
                                                                    { className: "font-medium" },
                                                                    "Tag All Users"
                                                                )
                                                            ]
                                                        ),
                                                        // Individual user checkboxes
                                                        filteredUsers.map(user => 
                                                            React.createElement('label',
                                                                {
                                                                    key: user.id,
                                                                    className: "flex items-center gap-2 px-2 py-1 hover:bg-gray-50 rounded cursor-pointer"
                                                                },
                                                                [
                                                                    React.createElement('input',
                                                                        {
                                                                            type: "checkbox",
                                                                            checked: selectedUsers.some(selected => selected.id === user.id),
                                                                            onChange: () => {
                                                                                setSelectedUsers(prev => {
                                                                                    const isSelected = prev.some(selected => selected.id === user.id);
                                                                                    return isSelected
                                                                                        ? prev.filter(selected => selected.id !== user.id)
                                                                                        : [...prev, user];
                                                                                });
                                                                            },
                                                                            className: "rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                                                                        }
                                                                    ),
                                                                    user.name
                                                                ]
                                                            )
                                                        )
                                                    ]
                                                )
                                            )
                                        ]
                                    )
                                ]
                            ),
                            // Add Note button with improved states
                            React.createElement('button',
                                {
                                    className: `px-4 py-2 rounded-lg font-medium transition-all duration-150 ease-in-out ${
                                        noteInput.trim() || attachments.length > 0
                                            ? 'bg-blue-600 text-white hover:bg-blue-700 hover:shadow-md' 
                                            : 'bg-gray-100 text-gray-400 cursor-not-allowed'
                                    }`,
                                    onClick: handleNoteSubmit,
                                    disabled: !noteInput.trim() && attachments.length === 0
                                },
                                isAddingNote ? 
                                    React.createElement('div', 
                                        { className: "flex items-center gap-2" },
                                        [
                                            React.createElement('div', 
                                                { className: "w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin" }
                                            ),
                                            "Adding..."
                                        ]
                                    ) : 
                                    "Add Note"
                            )
                        ]
                    )
                ]
            ),
            // Notes List
            React.createElement('div',
                { className: "mt-6 space-y-4" },
                [
                    // Organize notes into threads first
                    ...(project?.notes || [])
                        // Add filter for General notes
                        .filter(note => note.context === 'General')
                        .reduce((threads, note) => {
                            if (!note.repliedTo) {
                                // Find all replies to this parent note
                                const replies = (project?.notes || [])
                                    .filter(reply => 
                                        reply.repliedTo === note.ID && 
                                        reply.context === 'General'  // Also filter replies
                                    )
                                    .sort((a, b) => new Date(b.addedTime) - new Date(a.addedTime));
                                
                                threads.push({
                                    ...note,
                                    replies: replies
                                });
                            }
                            return threads;
                        }, [])
                        // Sort parent notes by date (newest first)
                        .sort((a, b) => new Date(b.addedTime) - new Date(a.addedTime))
                        // Limit to 5 parent notes unless showing all
                        .slice(0, showAllNotes ? undefined : 5)
                        .map(noteThread => 
                            React.createElement('div',
                                { 
                                    key: noteThread.ID,
                                    className: "space-y-3" 
                                },
                                [
                                    // Parent note
                                    React.createElement(NoteItem, {
                                        key: noteThread.ID,
                                        note: noteThread,
                                        isReply: false,
                                        onReply: handleReply,
                                        replyingTo,
                                        replyInput,
                                        setReplyInput,
                                        handleAddReply: async (noteId) => {
                                            setIsAddingReply(true);
                                            try {
                                                await handleAddReply(noteId);
                                            } finally {
                                                setIsAddingReply(false);
                                            }
                                        },
                                        users,
                                        replyCount: noteThread.replies.length,
                                        showAllReplies,
                                        setShowAllReplies,
                                        isAddingReply
                                    }),

                                    // Replies container
                                    noteThread.replies.length > 0 && React.createElement('div',
                                        { className: "ml-12 space-y-3" },
                                        [
                                            // Show either all replies or just the first three
                                            ...(showAllReplies[noteThread.ID] 
                                                ? noteThread.replies 
                                                : noteThread.replies.slice(0, 1))
                                            .map(reply =>
                                                React.createElement(NoteItem, {
                                                    key: reply.ID,
                                                    note: reply,
                                                    isReply: true,
                                                    onReply: handleReply,
                                                    replyingTo,
                                                    replyInput,
                                                    setReplyInput,
                                                    handleAddReply,
                                                    users,
                                                    showAllReplies,
                                                    setShowAllReplies
                                                })
                                            ),
                                            
                                            // Show more replies button if needed
                                            noteThread.replies.length > 1 && React.createElement('button',
                                                {
                                                    className: "text-sm text-gray-500 hover:text-blue-600 mt-2",
                                                    onClick: () => setShowAllReplies(prev => ({
                                                        ...prev,
                                                        [noteThread.ID]: !prev[noteThread.ID]
                                                    }))
                                                },
                                                showAllReplies[noteThread.ID]
                                                    ? "Show Less Replies"
                                                    : `Show ${noteThread.replies.length - 1} More ${noteThread.replies.length - 1 === 1 ? 'Reply' : 'Replies'}`
                                            )
                                        ]
                                    )
                                ]
                            )
                        ),
                        
                    // Add Show More/Less Notes button
                    (project?.notes || [])
                        .filter(note => !note.repliedTo && note.context === 'General')  // Add context filter
                        .length > 5 && 
                        React.createElement('button',
                            {
                                className: "w-full text-sm text-gray-500 hover:text-blue-600 mt-4 py-2",
                                onClick: () => setShowAllNotes(!showAllNotes)
                            },
                            showAllNotes 
                                ? "Show Less Notes" 
                                : `Show ${(project?.notes || [])
                                    .filter(note => !note.repliedTo && note.context === 'General')  // Add context filter
                                    .length - 5} More Notes`
                        )
                ]
            )
        ]
    );
};

export default NotesSection;
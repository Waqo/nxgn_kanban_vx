import React, { createContext, useContext, useState, useCallback } from 'react';
import Toast from '../components/Toast.js';

const ToastContext = createContext(null);

export const ToastProvider = ({ children }) => {
    const [toast, setToast] = useState({
        message: '',
        type: 'info',
        isVisible: false
    });

    const showToast = useCallback((message, type = 'info') => {
        setToast({
            message,
            type,
            isVisible: true
        });
    }, []);

    const hideToast = useCallback(() => {
        setToast(prev => ({
            ...prev,
            isVisible: false
        }));
    }, []);

    return React.createElement(ToastContext.Provider,
        {
            value: { showToast }
        },
        [
            children,
            React.createElement(Toast, {
                message: toast.message,
                type: toast.type,
                isVisible: toast.isVisible,
                onClose: hideToast
            })
        ]
    );
};

export const useToast = () => {
    const context = useContext(ToastContext);
    if (!context) {
        throw new Error('useToast must be used within a ToastProvider');
    }
    return context;
};
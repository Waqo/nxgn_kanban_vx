/* global React */
import React from 'react';

const formatDate = (dateString) => {
    if (!dateString) return '';
    return new Date(dateString).toLocaleDateString('en-US', { 
        month: '2-digit', 
        day: '2-digit', 
        year: '2-digit' 
    });
};

const IssuesSection = ({ issues, onResolveIssue, onRaiseIssue }) => {
    // Add console log to check props
    //console.log('IssuesSection props:', { issues, onResolveIssue, onRaiseIssue });

    // Filter for unresolved issues only
    const unresolvedIssues = issues ? issues.filter(issue => !issue.isResolved) : [];

    return React.createElement('div',
        { className: "bg-white rounded-lg shadow-sm p-1" },
        [
            // Header with Raise Issue button
            React.createElement('div',
                { className: "flex justify-between items-center mb-3 p-2" },
                [
                    React.createElement('h3',
                        { className: "text-sm font-medium text-gray-500" },
                        "Open Issues"
                    ),
                    React.createElement('button',
                        {
                            className: "inline-flex items-center px-3 py-1.5 bg-red-500 text-white text-sm rounded-md hover:bg-red-600",
                            onClick: () => {
                                //console.log('Raise Issue button clicked');
                                if (typeof onRaiseIssue === 'function') {
                                    onRaiseIssue();
                                } else {
                                    console.error('onRaiseIssue is not a function:', onRaiseIssue);
                                }
                            }
                        },
                        [
                            React.createElement('i', { className: "fas fa-exclamation-circle mr-2" }),
                            "Raise Issue"
                        ]
                    )
                ]
            ),
            
            // Issues List - now only showing unresolved issues
            unresolvedIssues.length > 0 ? 
                React.createElement('div',
                    { className: "space-y-3" },
                    unresolvedIssues.map(issue => 
                        React.createElement('div',
                            { 
                                key: issue.ID || issue.id,
                                className: "flex flex-col p-3 bg-red-100 rounded transition-all duration-300 ease-in-out"
                            },
                            [
                                // Header row with Author, Notify Sales badge, and Date
                                React.createElement('div',
                                    { className: "flex justify-between items-center mb-2 pb-2 border-b border-gray-400" },
                                    [
                                        // Left side with author and notify sales badge
                                        React.createElement('div',
                                            { className: "flex items-center gap-2" },
                                            [
                                                React.createElement('span',
                                                    { className: "text-xs text-black" },
                                                    issue.author
                                                ),
                                                // Notify Sales badge
                                                issue.notifySales && React.createElement('span',
                                                    {
                                                        className: "inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-purple-50 text-purple-700"
                                                    },
                                                    "Sales Notified"
                                                )
                                            ]
                                        ),
                                        // Date on the right
                                        React.createElement('span',
                                            { className: "text-xs text-black" },
                                            formatDate(issue.addedTime)
                                        )
                                    ]
                                ),
                                // Issue content
                                React.createElement('p',
                                    { className: "text-sm text-gray-700 mb-3" },
                                    issue.issueContent
                                ),
                                // Tagged Users section
                                (issue.taggedUsers?.length > 0 || issue.Tagged_Users?.length > 0) && 
                                    React.createElement('div',
                                        { className: "flex flex-wrap gap-1 mb-2" },
                                        // Handle both old and new tagged users formats
                                        (issue.Tagged_Users || issue.taggedUsers || []).map(user => 
                                            React.createElement('span',
                                                {
                                                    key: user.ID || user.id,
                                                    className: "inline-flex items-center px-2 py-0.5 rounded text-xs bg-red-200 text-red-800"
                                                },
                                                `@${user.zc_display_value?.trim() || user.name || 'Unknown User'}`
                                            )
                                        )
                                    ),
                                // Mark Resolved button (right-aligned)
                                React.createElement('div',
                                    { className: "flex justify-end" },
                                    React.createElement('button',
                                        {
                                            className: "text-xs bg-gray-200 text-gray-700 hover:bg-gray-300 px-3 py-1.5 rounded",
                                            onClick: () => {
                                                console.log('Resolving issue with ID:', issue.ID || issue.id);
                                                onResolveIssue(issue.ID || issue.id);
                                            }
                                        },
                                        "Mark Resolved"
                                    )
                                )
                            ]
                        )
                    )
                ) :
                React.createElement('p',
                    { className: "text-sm text-gray-500 text-center py-3" },
                    "No open issues"
                )
        ]
    );
};

export default IssuesSection;
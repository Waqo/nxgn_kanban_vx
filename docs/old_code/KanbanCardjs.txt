import React from 'react';
import { WorkRequirementBars } from './WorkRequirementBars.js';
import { navigateToURL } from '../utils/navigation.js';
import { updateUserCallStatus } from '../utils/recordUpdates.js';
import { User, DollarSign } from 'lucide-react';

const KanbanCard = ({ card, view, onDragStart, onDragEnd, onDoubleClick, onError }) => {
    const displayName = card.contactName || "No Contact Information";
    const phoneNumber = card.contactPhone || '';
    const email = card.contactEmail || '';
    
    // Format dates
    const formatDate = (dateString) => {
        if (!dateString) return '';
        return new Date(dateString).toLocaleDateString('en-US', { 
            month: '2-digit', 
            day: '2-digit', 
            year: '2-digit' 
        });
    };

    // Helper function for install date badge
    const getInstallDateBadge = () => {
        // Format function for consistent date display
        const formatToMMDDYY = (dateString) => {
            const date = new Date(dateString);
            const month = (date.getMonth() + 1).toString().padStart(2, '0');
            const day = date.getDate().toString().padStart(2, '0');
            const year = date.getFullYear().toString().slice(-2);
            return `${month}/${day}/${year}`;
        };

        // Only show badge if there's an installation booking
        if (card.installationBooking) {
            return {
                text: `Inst: ${formatToMMDDYY(card.installationBooking)}`,
                className: "bg-green-100 text-green-800"
            };
        }

        return null;
    };

    // Helper function for interconnect badge
    const getInterconnectBadge = () => {
        if (!card.interconnectStatus || card.interconnectStatus === "No Record") return null;
        
        if ([
            "Approval to Install", 
            "Upgrades Rqd: Approval",
            "In Service",
            "Conditionally Approved",
            "Approval To Install Upgrades Required"
        ].includes(card.interconnectStatus)) {
            return {
                text: "IC: Y",
                className: "bg-green-100 text-green-800",
                tooltip: card.interconnectStatus
            };
        }
        return {
            text: "IC: N",
            className: "bg-red-100 text-red-800",
            tooltip: card.interconnectStatus
        };
    };

    const getRoofTypeBadge = (roofType) => {
        if (!roofType) return null;
        
        const truncatedText = roofType.length > 15 
            ? roofType.substring(0, 15) + '...' 
            : roofType;
        
        return {
            text: truncatedText,
            className: "bg-gray-100 text-gray-800"
        };
    };
    // Helper function for permit badge
    const getPermitBadge = () => {
        if (!card.permitStatus || card.permitStatus === "No Record") return null;
        
        if (["Approved", "Projectdox Accepted"].includes(card.permitStatus)) {
            return {
                text: "Permit: Y",
                className: "bg-green-100 text-green-800"
            };
        }
        return {
            text: "Permit: N",
            className: "bg-red-100 text-red-800",
            tooltip: card.permitStatus
        };
    };

    // Add this helper function at the top of the component
    const truncateText = (text, limit) => {
        if (text.length <= limit) return text;
        return text.substring(0, limit) + '...';
    };

    // Helper function for system size badge
    const getSystemSizeBadge = () => {
        const badgeColor = card.isApproved === true || card.isApproved === "true" 
            ? "bg-green-100 text-green-800" 
            : "bg-gray-100 text-gray-800";
        return {
            text: `${card.systemSize || 0} kW`,
            className: badgeColor
        };
    };

    // Helper function for survey badge
    const getSurveyBadge = () => {
        if (card.surveyStatus !== true) return null;
        
        return {
            text: "SURV",
            className: "bg-gray-100 text-gray-800"
        };
    };

    // Add these helper functions for the new badges
    const getWorkBadges = () => {
        const badges = [];
        
        if (card.treeWork === "Yes") {
            const isCompleted = card.treeWorkStatus === "Completed";
            badges.push({
                text: "Tree",
                className: isCompleted 
                    ? "bg-gray-100 text-gray-500" 
                    : "bg-green-100 text-green-800"
            });
        }
        
        if (card.roofWork === "Yes") {
            const isCompleted = card.roofWorkStatus === "Completed";
            badges.push({
                text: "Roof",
                className: isCompleted 
                    ? "bg-gray-100 text-gray-500" 
                    : "bg-red-100 text-red-800"
            });
        }
        
        if (card.panelUpgrade === "Yes") {
            const isCompleted = card.puWorkStatus === "Completed";
            badges.push({
                text: "PU",
                className: isCompleted 
                    ? "bg-gray-100 text-gray-500" 
                    : "bg-blue-100 text-blue-800"
            });
        }
        
        return badges;
    };

    const getYieldBadgeColor = (yieldValue) => {
        const yield_num = parseFloat(yieldValue);
        const formatted_yield = yield_num.toFixed(2); // Format to 2 decimal places
        if (yield_num < 1000) {
            return {
                color: 'bg-red-100 text-red-800',
                value: formatted_yield
            };
        } else if (yield_num >= 1000 && yield_num <= 1100) {
            return {
                color: 'bg-yellow-100 text-yellow-800',
                value: formatted_yield
            };
        } else {
            return {
                color: 'bg-green-100 text-green-800',
                value: formatted_yield
            };
        }
    };

    // Add this helper function after other date-related functions
    const getDaysSinceSold = (dateSold) => {
        if (!dateSold) return null;
        const soldDate = new Date(dateSold);
        const today = new Date();
        const diffTime = Math.abs(today - soldDate);
        const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
        return diffDays;
    };

    const handleDragStart = (e) => {
        e.dataTransfer.setData('cardId', card.id);
        if (onDragStart) {
            onDragStart(card); // Pass the full card object
        }
    };
    
    const handleDragEnd = (e) => {
        const cardElement = e.currentTarget;
        cardElement.classList.remove('dragging');
        cardElement.style.opacity = ''; // Reset opacity
        
        if (onDragEnd) onDragEnd(e);
    };

    const handleEmailClick = (e) => {
        e.stopPropagation();
        if (email) {
            try {
                navigateToURL(`mailto:${email}`);  // Let the utility handle everything
                setTimeout(() => {
                    if (!document.hasFocus()) {
                        // Email client likely opened
                        return;
                    }
                    // If document still has focus, email client probably didn't open
                    if (onError) {
                        onError({
                            message: "Unable to open email client. You may need to:\n1. Configure your default email client\n2. Allow email links in your browser settings\n3. Try copying the email address manually",
                            type: 'warning'
                        });
                    }
                }, 1000);
            } catch (error) {
                console.error("Error initiating email:", error);
                if (onError) {
                    onError({
                        type: 'error',
                        message: "Failed to open email client. Please check your browser settings."
                    });
                }
            }
        } else {
            if (onError) {
                onError({
                    type: 'error',
                    message: "No email address available for this contact."
                });
            }
        }
    };

    return React.createElement('div', {
        className: `border-2 ${
            card.needHelp === true || card.needHelp === "true"
                ? 'border-red-500 relative before:absolute before:inset-0 before:shadow-[inset_0_0_8px_rgba(239,68,68,0.5)]'
                : 'border-gray-200'
        } text-card-foreground w-full bg-white rounded-xl hover:shadow-lg transition-all cursor-pointer hover:scale-[1.02]`,
        draggable: true,
        onDragStart: handleDragStart,
        onDragEnd: handleDragEnd,
        onDoubleClick: onDoubleClick,
        style: { height: 'fit-content' }
    }, [
        // Header section
        React.createElement('div', {
            className: 'flex justify-between items-center p-2 bg-gray-50 rounded-t-xl border-b'
        }, [
            React.createElement('div', {
                className: 'flex space-x-1'
            }, 
            getWorkBadges().map((badge, index) => 
                React.createElement('span', {
                    key: index,
                    className: `inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium ${badge.className}`
                }, badge.text)
            )),
            (card.isCashDeal === true || card.isCashDeal === "true") && React.createElement(DollarSign, {
                className: 'w-4 h-4 text-green-600'
            })
        ]),
        
        // Main content section
        React.createElement('div', {
            className: 'px-5 py-4 flex-grow'
        }, [
            // Row 2: Contact Name and Icons
            React.createElement(
                'div',
                { className: "flex justify-between items-center mt-0 mb-1" },
                React.createElement(
                    'div',
                    { 
                        className: "text-sm font-medium text-gray-900",
                        style: { minWidth: '20px', maxWidth: '200px' }
                    },
                    React.createElement(
                        'span',
                        { className: "truncate block" },
                        truncateText(displayName, 15)
                    )
                ),
                React.createElement(
                    'div',
                    { className: "flex items-center gap-2" },
                    phoneNumber && React.createElement(
                        'button',
                        {
                            className: "text-blue-600 hover:text-blue-800",
                            onClick: async (e) => {
                                e.stopPropagation();
                                try {
                                    const cleanPhone = phoneNumber.replace(/\D/g, '');
                                    const cleanName = displayName.trim();
                                    await updateUserCallStatus(cleanPhone, cleanName);
                                } catch (error) {
                                    console.error("Error initiating call:", error);
                                }
                            }
                        },
                        React.createElement('i', { className: "fas fa-phone" })
                    ),
                    email && React.createElement(
                        'button',
                        {
                            className: "text-blue-600 hover:text-blue-800",
                            onClick: handleEmailClick
                        },
                        React.createElement('i', { className: "far fa-envelope" })
                    )
                )
            ),

            // New Row: Address with icon
            React.createElement(
                'div',
                { 
                    className: "flex items-center gap-2 mb-2 text-sm text-gray-900"
                },
                React.createElement('i', { 
                    className: "fas fa-map-marker-alt text-gray-500"
                }),
                React.createElement(
                    'span',
                    { className: "truncate" },
                    card.addressLine1
                )
            ),

            // Row 3: System Size, Commercial, and Survey Status Badges
            React.createElement(
                'div',
                { className: "flex flex-wrap gap-1 mb-2" },
                React.createElement(
                    'span',
                    { 
                        className: `px-2 py-1 text-xs font-medium rounded ${getSystemSizeBadge().className}`
                    },
                    getSystemSizeBadge().text
                ),
                React.createElement(
                    'span',
                    {
                        className: `px-2 py-1 text-xs font-medium rounded ${
                            card.isCommercial === "true" || card.isCommercial === true
                                ? 'bg-purple-100 text-purple-800' 
                                : 'bg-blue-100 text-blue-800'
                        }`
                    },
                    card.isCommercial === "true" || card.isCommercial === true ? 'COM' : 'RES'
                ),
                // Only render survey badge if getSurveyBadge() returns a value
                getSurveyBadge() && React.createElement(
                    'span',
                    {
                        className: `px-2 py-1 text-xs font-medium rounded ${getSurveyBadge().className}`,
                    },
                    'SURV'
                ),
                        // Add roof type badge
                        card.roofType && React.createElement(
                            'span',
                            {
                                className: "px-2 py-1 text-xs font-medium rounded bg-gray-100 text-gray-800",
                                title: card.roofType // Show full text on hover
                            },
                            getRoofTypeBadge(card.roofType).text
                        )
            ),

            // Row 4: Status Badges (Permit and Interconnect)
            React.createElement(
                'div',
                { className: "flex flex-wrap gap-1 mb-2" },
                getPermitBadge() && React.createElement(
                    'div',
                    { 
                        className: `px-2 py-1 text-xs font-medium rounded ${getPermitBadge().className}`,
                        title: getPermitBadge().tooltip || ''
                    },
                    getPermitBadge().text
                ),
                getInterconnectBadge() && React.createElement(
                    'div',
                    { 
                        className: `px-2 py-1 text-xs font-medium rounded ${getInterconnectBadge().className}`,
                        title: getInterconnectBadge().tooltip || ''
                    },
                    getInterconnectBadge().text
                )
            ),

            // New dates and sales rep section with border
            React.createElement('div', {
                className: 'pt-2 border-t space-y-2'
            }, [
                // Dates row
                React.createElement('div', {
                    className: 'flex items-center gap-3 text-xs'
                }, [
                    card.dateSold && React.createElement('div', {
                        className: 'flex items-center gap-1'
                    }, [
                        React.createElement('span', {
                            className: "text-gray-600"
                        }, `Sold: ${formatDate(card.dateSold)}`),
                        React.createElement('span', {
                            className: "inline-flex items-center justify-center w-6 h-6 rounded-full bg-gray-100 text-gray-600"
                        }, getDaysSinceSold(card.dateSold))
                    ]),
                    getInstallDateBadge() && React.createElement('span', {
                        className: `px-2 py-1 rounded ${getInstallDateBadge().className}`
                    }, getInstallDateBadge().text)
                ]),
                
                // Sales rep row
                React.createElement('div', {
                    className: 'flex items-center justify-between text-xs text-gray-500'
                }, [
                    // Sales rep info with icon
                    React.createElement('div', {
                        className: 'flex items-center'
                    }, [
                        React.createElement(User, {
                            className: 'w-3 h-3 mr-1'
                        }),
                        React.createElement('span', {
                            className: 'truncate max-w-[120px]'
                        }, card.salesRepName || 'Unassigned')
                    ]),
                    
                    // Yield badge
                    card.yield && React.createElement('span', {
                        className: `px-2 py-0.5 rounded-full text-xs font-medium ${getYieldBadgeColor(card.yield).color}`
                    }, getYieldBadgeColor(card.yield).value)
                ])
            ])
        ])
    ]);
};

export default KanbanCard;

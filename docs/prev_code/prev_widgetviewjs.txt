// app/views/WidgetView.js

// Imports for components used in the template
import KanbanBoard from '../components/kanban/KanbanBoard.js';
import DevToolbar from '../components/common/DevToolbar.js'; // Make sure DevToolbar is imported

// Ensure Vuex is available for mapGetters
if (typeof Vuex === 'undefined') {
  console.warn('Vuex might not be loaded yet for helpers in WidgetView.');
}

const WidgetView = {
  name: 'WidgetView',
  components: {
    KanbanBoard,
    DevToolbar // Register DevToolbar locally
  },
  data() {
    return {
      // Initial local state for the view, if any
    };
  },
  computed: {
    // Use mapGetters to get states needed for view logic
    ...(typeof Vuex !== 'undefined' ? Vuex.mapGetters({
        isAdmin: 'user/isAdmin',
        // Map global loading/error state from UI module
        isGloballyLoading: 'ui/isGloballyLoading',
        globalError: 'ui/globalError'
    }) : {
        // Fallbacks
        isAdmin: () => false,
        isGloballyLoading: () => false,
        globalError: () => null
    }),

    // Use the mapped global states
    isLoading() {
      return this.isGloballyLoading;
    },
    error() {
      return this.globalError;
    }
  },
  methods: {
    // Methods specific to this view
    // We will likely dispatch actions here or in mounted
    fetchInitialData() {
      console.log('WidgetView: fetchInitialData called (implementation pending).');
      // Example dispatch:
      // this.$store.dispatch('user/fetchCurrentUser');
      // this.$store.dispatch('lookups/fetchAllLookups');
      // this.$store.dispatch('projects/fetchInitialProjects');
    }
  },
  mounted() {
    console.log('WidgetView mounted. Dispatching fetchInitialData...');
    // Dispatch the root action to fetch all essential data
    this.$store.dispatch('fetchInitialData');
  },
  // Reference the template defined in widget.html
  // template: '#widget-view-template'
  template: `
      <div class="widget-container w-full h-full flex flex-col">
        <!-- Dev Toolbar is now conditionally rendered HERE -->
        <dev-toolbar v-if="isAdmin"></dev-toolbar>

        <!-- Rest of the view content -->
        <!-- Keep header minimal for now, toolbar will be part of KanbanBoard -->
        <!-- <h1 class="text-xl font-semibold mb-4 p-4 flex-shrink-0">Kanban Widget View</h1> -->

        <div v-if="isLoading" class="flex-grow flex items-center justify-center">
          Loading...
          <!-- Add AppSpinner component later -->
        </div>

        <div v-else-if="error" class="flex-grow p-4 error-message text-red-600">
          Error loading widget: {{ error }}
        </div>

        <!-- Render Kanban Board when not loading and no error -->
        <div v-else class="widget-content flex-grow overflow-hidden">
           <kanban-board></kanban-board>
          <!-- Placeholder for Project Details Modal (conditionally rendered) -->
        </div>

      </div>
    `
};

// Expose the component definition globally
// window.WidgetView = WidgetView; 
export default WidgetView; 